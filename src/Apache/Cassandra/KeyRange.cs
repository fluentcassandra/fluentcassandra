using FluentCassandra.Thrift.Protocol;
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections.Generic;
using System.Text;

namespace FluentCassandra.Apache.Cassandra
{

  /// <summary>
  /// The semantics of start keys and tokens are slightly different.
  /// Keys are start-inclusive; tokens are start-exclusive.  Token
  /// ranges may also wrap -- that is, the end token may be less
  /// than the start one.  Thus, a range from keyX to keyX is a
  /// one-element range, but a range from tokenY to tokenY is the
  /// full ring.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class KeyRange : TBase
  {
    private byte[] _start_key;
    private byte[] _end_key;
    private string _start_token;
    private string _end_token;
    private List<IndexExpression> _row_filter;
    private int _count;

    public byte[] Start_key
    {
      get
      {
        return _start_key;
      }
      set
      {
        __isset.start_key = true;
        this._start_key = value;
      }
    }

    public byte[] End_key
    {
      get
      {
        return _end_key;
      }
      set
      {
        __isset.end_key = true;
        this._end_key = value;
      }
    }

    public string Start_token
    {
      get
      {
        return _start_token;
      }
      set
      {
        __isset.start_token = true;
        this._start_token = value;
      }
    }

    public string End_token
    {
      get
      {
        return _end_token;
      }
      set
      {
        __isset.end_token = true;
        this._end_token = value;
      }
    }

    public List<IndexExpression> Row_filter
    {
      get
      {
        return _row_filter;
      }
      set
      {
        __isset.row_filter = true;
        this._row_filter = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool start_key;
      public bool end_key;
      public bool start_token;
      public bool end_token;
      public bool row_filter;
      public bool count;
    }

    public KeyRange() {
      this._count = 100;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Start_key = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              End_key = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Start_token = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              End_token = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                Row_filter = new List<IndexExpression>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  IndexExpression _elem18 = new IndexExpression();
                  _elem18 = new IndexExpression();
                  _elem18.Read(iprot);
                  Row_filter.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("KeyRange");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Start_key != null && __isset.start_key) {
        field.Name = "start_key";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Start_key);
        oprot.WriteFieldEnd();
      }
      if (End_key != null && __isset.end_key) {
        field.Name = "end_key";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(End_key);
        oprot.WriteFieldEnd();
      }
      if (Start_token != null && __isset.start_token) {
        field.Name = "start_token";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Start_token);
        oprot.WriteFieldEnd();
      }
      if (End_token != null && __isset.end_token) {
        field.Name = "end_token";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(End_token);
        oprot.WriteFieldEnd();
      }
      if (__isset.count) {
        field.Name = "count";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Count);
        oprot.WriteFieldEnd();
      }
      if (Row_filter != null && __isset.row_filter) {
        field.Name = "row_filter";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Row_filter.Count));
          foreach (IndexExpression _iter19 in Row_filter)
          {
            _iter19.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("KeyRange(");
      sb.Append("Start_key: ");
      sb.Append(Start_key);
      sb.Append(",End_key: ");
      sb.Append(End_key);
      sb.Append(",Start_token: ");
      sb.Append(Start_token);
      sb.Append(",End_token: ");
      sb.Append(End_token);
      sb.Append(",Row_filter: ");
      sb.Append(Row_filter);
      sb.Append(",Count: ");
      sb.Append(Count);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
