/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using FluentCassandra.Thrift;
using FluentCassandra.Thrift.Collections;
using System.Runtime.Serialization;
using FluentCassandra.Thrift.Protocol;
using FluentCassandra.Thrift.Transport;

namespace FluentCassandra.Apache.Cassandra
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CqlPreparedResult : TBase
  {
    private int _itemId;
    private int _count;
    private List<string> _variable_types;
    private List<string> _variable_names;

    public int ItemId
    {
      get
      {
        return _itemId;
      }
      set
      {
        __isset.itemId = true;
        this._itemId = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }

    public List<string> Variable_types
    {
      get
      {
        return _variable_types;
      }
      set
      {
        __isset.variable_types = true;
        this._variable_types = value;
      }
    }

    public List<string> Variable_names
    {
      get
      {
        return _variable_names;
      }
      set
      {
        __isset.variable_names = true;
        this._variable_names = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool itemId;
      public bool count;
      public bool variable_types;
      public bool variable_names;
    }

    public CqlPreparedResult() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Variable_types = new List<string>();
                TList _list87 = iprot.ReadListBegin();
                for( int _i88 = 0; _i88 < _list87.Count; ++_i88)
                {
                  string _elem89 = null;
                  _elem89 = iprot.ReadString();
                  Variable_types.Add(_elem89);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Variable_names = new List<string>();
                TList _list90 = iprot.ReadListBegin();
                for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                {
                  string _elem92 = null;
                  _elem92 = iprot.ReadString();
                  Variable_names.Add(_elem92);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CqlPreparedResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.itemId) {
        field.Name = "itemId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.count) {
        field.Name = "count";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Count);
        oprot.WriteFieldEnd();
      }
      if (Variable_types != null && __isset.variable_types) {
        field.Name = "variable_types";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Variable_types.Count));
          foreach (string _iter93 in Variable_types)
          {
            oprot.WriteString(_iter93);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Variable_names != null && __isset.variable_names) {
        field.Name = "variable_names";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Variable_names.Count));
          foreach (string _iter94 in Variable_names)
          {
            oprot.WriteString(_iter94);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CqlPreparedResult(");
      sb.Append("ItemId: ");
      sb.Append(ItemId);
      sb.Append(",Count: ");
      sb.Append(Count);
      sb.Append(",Variable_types: ");
      sb.Append(Variable_types);
      sb.Append(",Variable_names: ");
      sb.Append(Variable_names);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
