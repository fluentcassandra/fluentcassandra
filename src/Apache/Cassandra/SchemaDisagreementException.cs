/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using FluentCassandra.Thrift;
using FluentCassandra.Thrift.Collections;
using System.Runtime.Serialization;
using FluentCassandra.Thrift.Protocol;
using FluentCassandra.Thrift.Transport;

namespace FluentCassandra.Apache.Cassandra
{

  /// <summary>
  /// NOTE: This up outdated exception left for backward compatibility reasons,
  /// no actual schema agreement validation is done starting from Cassandra 1.2
  /// 
  /// schemas are not in agreement across all nodes
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  [Obsolete("This up outdated exception left for backward compatibility reasons, no actual schema agreement validation is done starting from Cassandra 1.2", error: false)]
  public partial class SchemaDisagreementException : Exception, TBase
  {

    public SchemaDisagreementException() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SchemaDisagreementException");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SchemaDisagreementException(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
