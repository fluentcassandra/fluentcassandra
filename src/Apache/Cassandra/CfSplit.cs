/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using FluentCassandra.Thrift;
using FluentCassandra.Thrift.Collections;
using System.Runtime.Serialization;
using FluentCassandra.Thrift.Protocol;
using FluentCassandra.Thrift.Transport;

namespace FluentCassandra.Apache.Cassandra
{

  /// <summary>
  /// Represents input splits used by hadoop ColumnFamilyRecordReaders
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CfSplit : TBase
  {
    private string _start_token;
    private string _end_token;
    private long _row_count;

    public string Start_token
    {
      get
      {
        return _start_token;
      }
      set
      {
        __isset.start_token = true;
        this._start_token = value;
      }
    }

    public string End_token
    {
      get
      {
        return _end_token;
      }
      set
      {
        __isset.end_token = true;
        this._end_token = value;
      }
    }

    public long Row_count
    {
      get
      {
        return _row_count;
      }
      set
      {
        __isset.row_count = true;
        this._row_count = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool start_token;
      public bool end_token;
      public bool row_count;
    }

    public CfSplit() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Start_token = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              End_token = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Row_count = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CfSplit");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Start_token != null && __isset.start_token) {
        field.Name = "start_token";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Start_token);
        oprot.WriteFieldEnd();
      }
      if (End_token != null && __isset.end_token) {
        field.Name = "end_token";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(End_token);
        oprot.WriteFieldEnd();
      }
      if (__isset.row_count) {
        field.Name = "row_count";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Row_count);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CfSplit(");
      sb.Append("Start_token: ");
      sb.Append(Start_token);
      sb.Append(",End_token: ");
      sb.Append(End_token);
      sb.Append(",Row_count: ");
      sb.Append(Row_count);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
