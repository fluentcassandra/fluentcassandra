/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using FluentCassandra.Thrift;
using FluentCassandra.Thrift.Collections;
using System.Runtime.Serialization;
using FluentCassandra.Thrift.Protocol;
using FluentCassandra.Thrift.Transport;

namespace FluentCassandra.Apache.Cassandra
{

  /// <summary>
  /// Authentication requests can contain any data, dependent on the IAuthenticator used
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AuthenticationRequest : TBase
  {
    private Dictionary<string, string> _credentials;

    public Dictionary<string, string> Credentials
    {
      get
      {
        return _credentials;
      }
      set
      {
        __isset.credentials = true;
        this._credentials = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool credentials;
    }

    public AuthenticationRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Credentials = new Dictionary<string, string>();
                TMap _map36 = iprot.ReadMapBegin();
                for( int _i37 = 0; _i37 < _map36.Count; ++_i37)
                {
                  string _key38;
                  string _val39;
                  _key38 = iprot.ReadString();
                  _val39 = iprot.ReadString();
                  Credentials[_key38] = _val39;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AuthenticationRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Credentials != null && __isset.credentials) {
        field.Name = "credentials";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Credentials.Count));
          foreach (string _iter40 in Credentials.Keys)
          {
            oprot.WriteString(_iter40);
            oprot.WriteString(Credentials[_iter40]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AuthenticationRequest(");
      sb.Append("Credentials: ");
      sb.Append(Credentials);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
